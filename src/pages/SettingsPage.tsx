import { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card'
import { Button } from '../components/ui/button'
import { Input } from '../components/ui/input'
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '../components/ui/dialog'
import { supabase, hashPassword, verifyPassword, formatMoroccanDate } from '../lib/supabase'
import { User } from '../App'

interface SettingsPageProps {
  user: User
  onLogout: () => void
}

export default function SettingsPage({ user, onLogout }: SettingsPageProps) {
  const [currentPassword, setCurrentPassword] = useState('')
  const [newPassword, setNewPassword] = useState('')
  const [confirmPassword, setConfirmPassword] = useState('')
  const [isChangingPassword, setIsChangingPassword] = useState(false)
  const [userStats, setUserStats] = useState({
    totalSpent: 0,
    totalEarned: 0,
    joinDate: ''
  })
  const [isLoadingStats, setIsLoadingStats] = useState(true)

  // ุชุญููู ุฅุญุตุงุฆูุงุช ุงููุณุชุฎุฏู
  const loadUserStats = async () => {
    try {
      setIsLoadingStats(true)
      
      // ุงูุญุตูู ุนูู ุชุงุฑูุฎ ุงูุงูุถูุงู
      const { data: userData, error: userError } = await supabase
        .from('users')
        .select('created_at')
        .eq('id', user.id)
        .single()

      if (userError) {
        console.error('Error loading user data:', userError)
      }

      // ุงูุญุตูู ุนูู ุฅุญุตุงุฆูุงุช ุงููุนุงููุงุช
      const { data: transactions, error: transError } = await supabase
        .from('transactions')
        .select('type, amount')
        .eq('user_id', user.id)

      if (transError) {
        console.error('Error loading transactions:', transError)
      } else {
        const totalSpent = transactions
          ?.filter(t => t.type === 'purchase')
          .reduce((sum, t) => sum + Math.abs(t.amount), 0) || 0
        
        const totalEarned = transactions
          ?.filter(t => t.type === 'sale')
          .reduce((sum, t) => sum + t.amount, 0) || 0

        setUserStats({
          totalSpent,
          totalEarned,
          joinDate: userData?.created_at ? formatMoroccanDate(new Date(userData.created_at)) : 'ุบูุฑ ูุญุฏุฏ'
        })
      }
    } catch (err) {
      console.error('Error loading user stats:', err)
    } finally {
      setIsLoadingStats(false)
    }
  }

  useEffect(() => {
    loadUserStats()
  }, [user.id]) // eslint-disable-line react-hooks/exhaustive-deps

  const handleChangePassword = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (newPassword !== confirmPassword) {
      alert('ูููุงุช ุงููุฑูุฑ ุงูุฌุฏูุฏุฉ ุบูุฑ ูุชุทุงุจูุฉ')
      return
    }

    if (newPassword.length < 6) {
      alert('ูููุฉ ุงููุฑูุฑ ุงูุฌุฏูุฏุฉ ูุฌุจ ุฃู ุชููู 6 ุฃุญุฑู ุนูู ุงูุฃูู')
      return
    }

    setIsChangingPassword(true)

    try {
      // ุงูุญุตูู ุนูู ูููุฉ ุงููุฑูุฑ ุงูุญุงููุฉ ุงููุดูุฑุฉ
      const { data: userData, error: fetchError } = await supabase
        .from('users')
        .select('password_hash')
        .eq('id', user.id)
        .single()

      if (fetchError) {
        throw new Error('ูุดู ูู ุงูุชุญูู ูู ูููุฉ ุงููุฑูุฑ ุงูุญุงููุฉ')
      }

      // ุงูุชุญูู ูู ูููุฉ ุงููุฑูุฑ ุงูุญุงููุฉ
      const isValidPassword = await verifyPassword(currentPassword, userData.password_hash)
      if (!isValidPassword) {
        throw new Error('ูููุฉ ุงููุฑูุฑ ุงูุญุงููุฉ ุบูุฑ ุตุญูุญุฉ')
      }

      // ุชุดููุฑ ูููุฉ ุงููุฑูุฑ ุงูุฌุฏูุฏุฉ
      const newPasswordHash = await hashPassword(newPassword)

      // ุชุญุฏูุซ ูููุฉ ุงููุฑูุฑ
      const { error: updateError } = await supabase
        .from('users')
        .update({ password_hash: newPasswordHash })
        .eq('id', user.id)

      if (updateError) {
        throw new Error('ูุดู ูู ุชุญุฏูุซ ูููุฉ ุงููุฑูุฑ')
      }

      alert('ุชู ุชุบููุฑ ูููุฉ ุงููุฑูุฑ ุจูุฌุงุญ!')
      setCurrentPassword('')
      setNewPassword('')
      setConfirmPassword('')
      
    } catch (err) {
      alert(err instanceof Error ? err.message : 'ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุบููุฑ ูููุฉ ุงููุฑูุฑ')
    } finally {
      setIsChangingPassword(false)
    }
  }

  const handleLogout = () => {
    if (confirm('ูู ุฃูุช ูุชุฃูุฏ ูู ุชุณุฌูู ุงูุฎุฑูุฌุ')) {
      onLogout()
    }
  }

  return (
    <div className="p-4 space-y-6">
      {/* Header */}
      <div className="text-center py-4">
        <h1 className="text-2xl font-bold text-blue-600 mb-2">โ๏ธ ุงูุฅุนุฏุงุฏุงุช</h1>
        <p className="text-gray-600">ุฅุฏุงุฑุฉ ุญุณุงุจู ูุฅุนุฏุงุฏุงุชู</p>
      </div>

      {/* Account Info */}
      <Card>
        <CardHeader>
          <CardTitle>ูุนูููุงุช ุงูุญุณุงุจ</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex justify-between items-center py-2 border-b">
            <span className="text-gray-600">ุฑูู ุงููุงุชู</span>
            <span className="font-medium">{user.phone}</span>
          </div>
          <div className="flex justify-between items-center py-2 border-b">
            <span className="text-gray-600">ุงูุฑุตูุฏ ุงูุญุงูู</span>
            <span className="font-medium text-blue-600">{user.balance.toFixed(2)} ุฏุฑูู</span>
          </div>
          <div className="flex justify-between items-center py-2 border-b">
            <span className="text-gray-600">ุนุฏุฏ ุงููุชุจ ุงููุดุชุฑุงุฉ</span>
            <span className="font-medium">{user.booksCount} ูุชุงุจ</span>
          </div>
          <div className="flex justify-between items-center py-2 border-b">
            <span className="text-gray-600">ุชุงุฑูุฎ ุฅูุดุงุก ุงูุญุณุงุจ</span>
            <span className="font-medium">
              {isLoadingStats ? 'ุฌุงุฑู ุงูุชุญููู...' : userStats.joinDate}
            </span>
          </div>
          {user.isAdmin && (
            <div className="flex justify-between items-center py-2">
              <span className="text-gray-600">ููุน ุงูุญุณุงุจ</span>
              <span className="font-medium text-yellow-600">๐ ูุณุคูู</span>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Statistics */}
      <Card>
        <CardHeader>
          <CardTitle>ุงูุฅุญุตุงุฆูุงุช</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex justify-between items-center py-2 border-b">
            <span className="text-gray-600">ุฅุฌูุงูู ุงููุดุชุฑูุงุช</span>
            <span className="font-medium text-red-600">
              {isLoadingStats ? 'ุฌุงุฑู ุงูุชุญููู...' : `${userStats.totalSpent.toFixed(2)} ุฏุฑูู`}
            </span>
          </div>
          <div className="flex justify-between items-center py-2 border-b">
            <span className="text-gray-600">ุฅุฌูุงูู ุงููุจูุนุงุช</span>
            <span className="font-medium text-green-600">
              {isLoadingStats ? 'ุฌุงุฑู ุงูุชุญููู...' : `${userStats.totalEarned.toFixed(2)} ุฏุฑูู`}
            </span>
          </div>
          <div className="flex justify-between items-center py-2">
            <span className="text-gray-600">ุงูุฑุจุญ/ุงูุฎุณุงุฑุฉ</span>
            <span className={`font-medium ${userStats.totalEarned - userStats.totalSpent >= 0 ? 'text-green-600' : 'text-red-600'}`}>
              {isLoadingStats ? 'ุฌุงุฑู ุงูุชุญููู...' : `${(userStats.totalEarned - userStats.totalSpent).toFixed(2)} ุฏุฑูู`}
            </span>
          </div>
        </CardContent>
      </Card>

      {/* Security Settings */}
      <Card>
        <CardHeader>
          <CardTitle>ุงูุฃูุงู</CardTitle>
        </CardHeader>
        <CardContent>
          <Dialog>
            <DialogTrigger asChild>
              <Button variant="outline" className="w-full">
                ๐ ุชุบููุฑ ูููุฉ ุงููุฑูุฑ
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>ุชุบููุฑ ูููุฉ ุงููุฑูุฑ</DialogTitle>
                <DialogDescription>
                  ุฃุฏุฎู ูููุฉ ุงููุฑูุฑ ุงูุญุงููุฉ ูุงูุฌุฏูุฏุฉ
                </DialogDescription>
              </DialogHeader>
              <form onSubmit={handleChangePassword} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-2">ูููุฉ ุงููุฑูุฑ ุงูุญุงููุฉ</label>
                  <Input
                    type="password"
                    value={currentPassword}
                    onChange={(e) => setCurrentPassword(e.target.value)}
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-2">ูููุฉ ุงููุฑูุฑ ุงูุฌุฏูุฏุฉ</label>
                  <Input
                    type="password"
                    value={newPassword}
                    onChange={(e) => setNewPassword(e.target.value)}
                    required
                    minLength={6}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-2">ุชุฃููุฏ ูููุฉ ุงููุฑูุฑ ุงูุฌุฏูุฏุฉ</label>
                  <Input
                    type="password"
                    value={confirmPassword}
                    onChange={(e) => setConfirmPassword(e.target.value)}
                    required
                    minLength={6}
                  />
                </div>
                <Button type="submit" className="w-full" disabled={isChangingPassword}>
                  {isChangingPassword ? 'ุฌุงุฑู ุงูุชุบููุฑ...' : 'ุชุบููุฑ ูููุฉ ุงููุฑูุฑ'}
                </Button>
              </form>
            </DialogContent>
          </Dialog>
        </CardContent>
      </Card>

      {/* App Settings */}
      <Card>
        <CardHeader>
          <CardTitle>ุฅุนุฏุงุฏุงุช ุงูุชุทุจูู</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex justify-between items-center py-2">
            <span>ุงูุฅุดุนุงุฑุงุช</span>
            <Button variant="outline" size="sm">ุชูุนูู</Button>
          </div>
          <div className="flex justify-between items-center py-2">
            <span>ุงููุบุฉ</span>
            <span className="text-gray-600">ุงูุนุฑุจูุฉ</span>
          </div>
          <div className="flex justify-between items-center py-2">
            <span>ุงูุนููุฉ</span>
            <span className="text-gray-600">ุงูุฏุฑูู ุงููุบุฑุจู (MAD)</span>
          </div>
        </CardContent>
      </Card>

      {/* Support */}
      <Card>
        <CardHeader>
          <CardTitle>ุงูุฏุนู ูุงููุณุงุนุฏุฉ</CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          <Button variant="outline" className="w-full justify-start">
            โ ุงูุฃุณุฆูุฉ ุงูุดุงุฆุนุฉ
          </Button>
          <Button variant="outline" className="w-full justify-start">
            ๐ ุงุชุตู ุจูุง
          </Button>
          <Button variant="outline" className="w-full justify-start">
            ๐ง ุฅุฑุณุงู ููุงุญุธุงุช
          </Button>
          <Button variant="outline" className="w-full justify-start">
            ๐ ุดุฑูุท ุงูุงุณุชุฎุฏุงู
          </Button>
        </CardContent>
      </Card>

      {/* Logout */}
      <Card>
        <CardContent className="p-4">
          <Button 
            variant="destructive" 
            className="w-full"
            onClick={handleLogout}
          >
            ๐ช ุชุณุฌูู ุงูุฎุฑูุฌ
          </Button>
        </CardContent>
      </Card>

      {/* App Info */}
      <div className="text-center text-sm text-gray-500 py-4">
        <p>ูุญูุธุชู - ุณูู ุชุจุงุฏู ุงููุชุจ</p>
        <p>ุงูุฅุตุฏุงุฑ 1.0.0</p>
        <p className="mt-2">ุชู ุงูุชุทููุฑ ุจูุงุณุทุฉ Blink</p>
      </div>
    </div>
  )
}